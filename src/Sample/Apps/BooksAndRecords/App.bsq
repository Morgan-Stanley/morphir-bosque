//This is a rewrite of the sample Books and Records App

namespace NSMain;

typedef ID = Int;
typedef ProductID = String;

//Bosque ints are 2^52 so this is fine for our purposes
typedef Price = Int;
typedef Quantity = Int;
typedef Value = Int;

entity Deal { 
    invariant $price >= 0; //TODO in Bosque add diagnostics msg option
    invariant $quantity >= 0;

    field id: ID;
    field product: ProductID;
    field price: Price;
    field quantity: Quantity;
}

typedef DealState = Map<ID, Deal>;

concept Event {
}

entity DealOpened provides Event {
    invariant $price >= 0; //TODO in Bosque add diagnostics msg option
    invariant $quantity >= 0;

    field dealId: ID;
    field productId: ProductID;
    field price: Price;
    field quantity: Quantity;
}

entity DealClosed provides Event {
    field dealId: ID;
}

function dealValue(d: Deal): Value {
    return d.price * d.quantity;
}

function openDeal(state: DealState, deal: DealOpened): DealState {
    check !state.has(deal.dealId);
       
    return state.unionWith(DealState@{deal.dealId=>Deal@{id=deal.dealId, product=deal.productId, price=deal.price, quantity=deal.quantity}});
}

function closeDeal(state: DealState, deal: DealClosed): DealState {
    check state.has(deal.dealId);

    let toExclude = Set<ID>@{deal.dealId};
    return state.excludeSet(toExclude);
}

function processDealEvent(state: DealState, event: Event): DealState {
    switch(event) {
        type DealOpened => { return openDeal(state, event); }
        type DealClosed => { return closeDeal(state, event); }
    }
}

//A mock deal state manager for testing and examples
function loadDealState(): DealState {
    var state = DealState@{};

    state = processDealEvent(state, DealOpened@{dealId = 1, productId = "tea", price = 10, quantity = 100});
    state = processDealEvent(state, DealOpened@{dealId = 2, productId = "coffee", price = 1, quantity = 100});

    return state;
}

//A mock deal state manager for testing and examples
function storeDealState(state: DealState): Bool {
    return true;
}

entrypoint function openDealAPI(dealid: ID, product: ProductID, price: Int, quantity: Int): Bool
    requires price >= 0;
    requires quantity >= 0; //<----- oops forgot to validate input
{
    var state = loadDealState();
    if(state.has(dealid)) {
        return false;
    }

    var nstate = processDealEvent(state, DealOpened@{dealId = dealid, productId = product, price = price, quantity = quantity});
    return storeDealState(nstate);
}

entrypoint function closeDealAPI(dealid: ID): Bool 
{
    var state = loadDealState();
    if(!state.has(dealid)) {
        return false;
    }

    var nstate = processDealEvent(state, DealClosed@{dealId = dealid});
    return storeDealState(nstate);
}
