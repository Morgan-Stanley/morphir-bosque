//This is a rewrite of the sample Order App

namespace NSMain;

typedef ID = Int;
typedef ProductID = String;

typedef Price = Int;
typedef Quantity = Int;
typedef Value = Int;

typedef MarketPrices = Map<ProductID, Price>;
typedef ProductQuantities = Map<ProductID, Quantity>;

concept OrderPrice {
}

entity Market provides OrderPrice {
}

entity Limit provides OrderPrice {
    invariant this.price >= 0;

    field price: Price;
}

concept Request {
    field id: ID;
    field requestPrice: OrderPrice;
}

entity BuyRequest provides Request {
    invariant this.quantity >= 0;

    field quantity: Quantity;
    field product: ProductID;
}

entity SellRequest provides Request { 
    field dealId: ID;
}

concept RejectReason {
}

entity InsufficientInventory provides RejectReason {
    field actualQuantity: Quantity;
    field requestedQuantity: Quantity;
}

entity DisagreeablePrice provides RejectReason {
    field actualPrice: Price;
    field requestedPrice: OrderPrice;
}

//An order can be:
//  * Accepted if everything goes well, or
//  * Invalid if a validation rule was violated -- we treat this as a terminal failure that is checked to never happen, or
//  * Rejected if the order was valid but we didn't accpt it for business reasons.
concept Response {
}

concept BuyResponse provides Response {
    field id: ID;
}

entity BuyAccepted provides BuyResponse {
    invariant this.price >= 0;
    invariant this.quantity >= 0;

    field productId: ProductID;
    field price: Price;
    field quantity: Quantity;
}

entity BuyRejected provides BuyResponse {
    invariant !this.reasons->empty();

    field reasons: List<RejectReason>;
}

entity SellAccepted provides Response {
    invariant this.price >= 0;

    field id: ID;
    field price: Price;
}

function lockinPrice(requestPrice: OrderPrice, marketPrice: Price): Price {
    return requestPrice->is<Limit>() ? requestPrice.price : marketPrice;
}

function acceptability(request: BuyRequest, marketPrice: Price, availableInventory: Quantity): List<RejectReason> {
    var! rejects = List<RejectReason>{};

    if(availableInventory < request.quantity) {
        rejects = rejects->push(InsufficientInventory{actualQuantity=availableInventory, requestedQuantity=request.quantity});
    }

    if(lockinPrice(request.requestPrice, marketPrice) < Math::div(Math::mult(marketPrice, 9), 10)) {
        rejects = rejects->push(DisagreeablePrice{actualPrice=marketPrice, requestedPrice=request.requestPrice});
    }
    
    return rejects;
}

function processBuy(request: BuyRequest, marketPrice: Price, availableInventory: Quantity): BuyResponse {
    //violations = validate request -- these are now impossible as you cannot build an invalid request object
    var rejections = acceptability(request, marketPrice, availableInventory);
    var lockPrice = lockinPrice(request.requestPrice, marketPrice);
    
    if(!rejections->empty()) {
        return BuyRejected{id=request.id, reasons=rejections};
    }
    else {
        return BuyAccepted{id=request.id, productId=request.product, price=lockPrice, quantity=request.quantity};
    }
}

function processSell(request: SellRequest, marketPrice: Price): SellAccepted {
    var lockPrice = lockinPrice(request.requestPrice, marketPrice);
    return SellAccepted{id=request.id, price=lockPrice};
}

function availability(startOfDayPosition: Quantity, buys: List<BuyResponse>): Quantity {
    var sumOfBuys = buys->ofType<BuyAccepted>()->map<Quantity>(fn(response) => response.quantity)->sum();
    return startOfDayPosition - sumOfBuys;
}

///////////////////////////////////////////////

entity OrderState { 
    field buys: Map<ID, BuyResponse>;
    field sells: Map<ID, SellAccepted>;
}

//A mock state manager for testing and examples
function loadState(): { state: OrderState, prices: MarketPrices, quantities: ProductQuantities } {
    var! state = OrderState{ buys=Map<ID, BuyResponse>{}, sells=Map<ID, SellAccepted>{} };
    var priceState = Map<ProductID, Price>{ ["coffee", 25], ["tea", 35] };
    var quantityState = Map<ProductID, Price>{ ["coffee", 3], ["tea", 10] };

    return { state=state, prices=priceState, quantities=quantityState };
}

//A mock state manager for testing and examples
function storeState(state: OrderState): Bool {
    return true;
}

entrypoint function apiBuyMarket(id: ID, quantity: Quantity, product: ProductID): Bool
    requires quantity >= 0;
{
    var { state=state, prices=prices, quantities=quantities } = loadState();
    if (state.buys->has(id) || state.sells->has(id)) {
        return false;
    }

    var request = BuyRequest{id=id, requestPrice=Market{}, quantity=quantity, product=product};
    var currentMarketPrice = prices->tryGet(request.product);
    var currentAvailility = availability(quantities->tryGet(request.product) ?| 0, state.buys->getValues());
    var buyresult = currentMarketPrice ?& processBuy(request, currentMarketPrice, currentAvailility);
    var nstate = buyresult?->is<BuyAccepted>() ? OrderState{buys=state.buys->add(buyresult.id, buyresult), sells=state.sells} : state;

    return storeState(nstate) && buyresult?->is<BuyAccepted>();
}

entrypoint function apiBuyLimit(id: ID, requestPrice: Price, quantity: Quantity, product: ProductID): Bool
    requires requestPrice >= 0;
    requires quantity >= 0;
{
    var { state=state, prices=prices, quantities=quantities } = loadState();
    if (state.buys->has(id) || state.sells->has(id)) {
        return false;
    }

    var request = BuyRequest{id=id, requestPrice=Limit{price=requestPrice}, quantity=quantity, product=product};
    var currentMarketPrice = prices->tryGet(request.product);
    var currentAvailility = availability(quantities->tryGet(request.product) ?| 0, state.buys->getValues());
    var buyresult = currentMarketPrice ?& processBuy(request, currentMarketPrice, currentAvailility);
    var nstate = buyresult?->is<BuyAccepted>() ? OrderState{buys=state.buys->add(buyresult.id, buyresult), sells=state.sells} : state;

    return storeState(nstate) && buyresult?->is<BuyAccepted>();
}
